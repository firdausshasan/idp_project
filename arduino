#include <SPI.h>
#include <MFRC522.h>
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

// Pin assignments
#define SS_RFID 10 // RFID SDA
#define RST_RFID 9 // RFID RST
#define MP3_TX 2 // DFPlayer Mini RX
#define MP3_RX 3 // DFPlayer Mini TX

MFRC522 mfrc522(SS_RFID, RST_RFID); // Create MFRC522 instance
SoftwareSerial mp3Serial(MP3_RX, MP3_TX); // RX, TX for DFPlayer Mini
DFRobotDFPlayerMini player;

byte lastUID[4]; // To store the last detected UID
bool isPlaying = false; // To check if a track is currently playing

void setup() {
  Serial.begin(9600);
  SPI.begin(); // Initialize SPI bus for RFID
  mfrc522.PCD_Init(); // Initialize the RFID reader
  mp3Serial.begin(9600);
  if (!player.begin(mp3Serial)) { // Start the DFPlayer Mini MP3 module
    Serial.println("Could not find the DFPlayer Mini");
    while (true); // Halt if module not found
  }
  player.volume(30); // Set maximum volume (0-30)
  Serial.println("Ready to scan RFID card and play audio");
}

void loop() {
  // Check for new RFID card presence
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    delay(500); // Wait a bit before trying again
    return;
  }

  // If a new card is present, read its UID
  Serial.print("Card UID:");
  byte uid[] = {0x83, 0x24, 0xDC, 0x34}; // Define the specific UID
  byte uid2[] = {0x83, 0x29, 0xA4, 0xAA}; // Define another specific UID
  byte uid3[] = {0xAA, 0xD4, 0x41, 0x24}; // Define another specific UID

  // Check if the new card UID is different from the last UID
  if (!compareUID(mfrc522.uid.uidByte, lastUID, mfrc522.uid.size)) {
    // Save the current UID as the last UID
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      lastUID[i] = mfrc522.uid.uidByte[i];
    }

    // Stop the currently playing track if any
    if (isPlaying) {
      player.stop();
      isPlaying = false;
    }

    // Play the appropriate track based on the detected UID
    if (compareUID(mfrc522.uid.uidByte, uid, mfrc522.uid.size)) {
      player.play(1); // Play track 1
      Serial.println("Playing MP3 file 'audio1.mp3' for the specified UID");
      isPlaying = true;
    } else if (compareUID(mfrc522.uid.uidByte, uid2, mfrc522.uid.size)) {
      player.play(2); // Play track 2
      Serial.println("Playing MP3 file 'audio2.mp3' for the specified UID");
      isPlaying = true;
    } else if (compareUID(mfrc522.uid.uidByte, uid3, mfrc522.uid.size)) {
      player.play(3); // Play track 3
      Serial.println("Playing MP3 file 'audio3.mp3' for the specified UID");
      isPlaying = true;
    } else {
      Serial.println("UID does not match any specified UID");
    }
  }

  delay(500); // Add a small delay to avoid rapid repeat detection
}

bool compareUID(byte *uid1, byte *uid2, byte size) {
  // Compare two byte arrays for equality
  for (byte i = 0; i < size; i++) {
    if (uid1[i] != uid2[i]) {
      return false; // Not equal
    }
  }
  return true; // Equal
}